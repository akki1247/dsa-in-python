Creating the node
Logic:

class Node:
    def __init__(self,data):
        self.data = data
        self.next = None

class Linked:
    def __init__(self):
        self.head = None
        
    def append(self,data):                                          # add values into nodes
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            return
        last_node = self.head
        while last_node.next:
            last_node = last_node.next
        last_node.next = new_node
    
    def display(self):                                              #display value of nodes
        curr = self.head
        while curr:
            print(curr.data,end ="-> ")
            curr = curr.next
        print("None")
  
    #----- all possible deletes ----------------  
    def begin_del(self):                                             # Delete node from begin
        if self.head is not None:
            self.head = self.head.next
        
    def end_del1(self):                                              #keep 1 and delete all other
        curr = self.head
        while curr.next:
            curr.next = curr.next.next
    
    def end_del(self):                                               #delete node from end
        curr = self.head
        while curr.next.next is not None:
            curr = curr.next
        curr.next = None
        
    def val_del(self,data):                                          #delete node by value
        current = self.head
        while current.next.data != data:
            current = current.next
        current.next = current.next.next
    
    #-------- All Possible inserts ------------------
    def end_ins(self,data):                                          # insert node at end
        curr = self.head
        while curr.next is not None:
            curr = curr.next
        curr.next = Node(data)
        
    def beg_ins(self,data):                                           # insert node at begin
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node
    
    def pos_ins(self, position, data):                                 ## insert node at position
        new_node = Node(data)
        if position == 0:
            new_node.next = self.head
            self.head = new_node
            return
        current = self.head
        count = 0
        while current and count < position - 1:
            current = current.next
            count += 1
        if current is None:
            print("Position out of bounds")
            return
        new_node.next = current.next
        current.next = new_node
    
    def ins_value(self, value, data):                                    ## insert value after a particular data
        new_node = Node(data)
        current = self.head
        while current:
            if current.data == value:
                new_node.next = current.next
                current.next = new_node
                return
            current = current.next
        print("Value not found in the list")

    def beg_replace(self,value):                                         # update value at 1st position
        if self.head is not None:
            self.head.data = value
   
    def end_replace(self,data):                                           # update last node
        curr = self.head
        while curr.next.next is not None:
            curr = curr.next
        curr.next = Node(data)
#-----------------------------------------------------------------------------------------------------------------------
# find the duplicate elements from linked list

def dup(self):
        current = self.head
        while current:
          runner = current.next
          while runner:
            if current.data == runner.data:
              print(current.data)  # Print duplicate element
              break  # No need to check further for current element's duplicates
            runner = runner.next
          current = current.next
list = List()
list.append(4)
list.append(6)
list.append(7)
list.append(8)


#list.display()
#list.insert_after(list.head.next,0)
list.del_par(7)
list.display()
list.pos(3,0)
list.value(7,10)
list.display()



Questions to solve

1. find the duplicates and display duplicates (do not remove them).
2. remove the duplicates and display unique list.
3. reverse the linked list.
4.Compare two linked lists for equality.
Advanced Operations:
5.Detect a loop in a linked list (Floydâ€™s Cycle Detection Algorithm).
6.Find the middle node of a linked list.
7.Merge two sorted linked lists into one sorted list.
8.Split a linked list into two halves.
update first,end,by data, by value: node data
